#version 430 core

#define FLOAT_MAX 3.4028235e+38
#define FLOAT_MIN -3.4028235e+38
#define EPSILON 0.001

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D imgOutput;

struct Ray {
    vec3 Origin;
    vec3 Direction;
};

struct Sphere {
    vec4 Position;
    float Mat;
};

struct Cuboid {
	vec4 PositionLLC;
	vec4 U;
	vec4 V;
	float MaterialIndex;
	float Width;
	float Height;
};

struct Material {
    vec4 Color;
    float Roughness;
    float SpecularProbability;
    float RefractionRatio;
    float EmissiveStrenght;
    vec4 EmissiveColor;
	vec4 SpecularColor;
	float RefractionProbability;
	float RefractionRoughness;
	vec4 RefractionColor;
};

struct HitInfo {
    float HitDistance;
    vec3 HitPosition;
    vec3 Normal;
    int ObjectIndex;
    int ObjectType;
    bool Inside;
};

Ray CalculateRayFromCamera(mat4 inverseProj, mat4 inverseView, vec3 cameraPos, vec2 ndc);
vec4 PerPixel(vec2 ndc);
float BSDF(inout Ray ray, HitInfo hit, Material material, out bool isRefractive, out bool isSpecular);
HitInfo TraceRay(Ray ray);
HitInfo HandleHit(Ray ray, float hitDistance, int index, int objType, bool insideHit);
HitInfo NoHit();
bool HitSphere(Ray ray, Sphere sphere, out float t1, out float t2);
float HitQuad(Ray ray, Cuboid cuboid);
float FresnelSchlick(float n1, float n2, vec3 normal, vec3 incident, float f0, float f90);
float Schlick(float cosine, float ratio);
vec3 GetNormal(Cuboid cuboid, vec3 surfacePosition);
uint GetPCGHash(inout uint seed);
float GetRandomFloat();
vec3 GetRandomVector(uint seed);

uniform int width;
uniform int height;
uniform int rendererFrame;
uniform int samplesPerPixel;
uniform int rayDepth;
uniform vec3 cameraPosition;
uniform mat4 inverseProjection;
uniform mat4 inverseView;
uniform vec3 BackgroundColor;

layout(std430, binding = 0) buffer SpheresBuffer {
    Sphere Spheres[];
};

layout(std430, binding = 1) buffer MaterialsBuffer {
    Material Materials[];
};

layout(std430, binding = 2) buffer CuboidsBuffer {
    Cuboid Cuboids[];
};

uint rndSeed;

void main() {
    ivec2 imageResultSize = imageSize(imgOutput);
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    rndSeed = gl_GlobalInvocationID.x * 1973 + gl_GlobalInvocationID.y * 9277 + rendererFrame * 2699 | 1;

    vec4 value = vec4(0.0, 0.0, 0.0, 1.0);
    for(int i = 0; i < samplesPerPixel; i++) {
        // anti aliasing
        vec2 subPixelOffset = vec2(GetRandomFloat(), GetRandomFloat());
        vec2 ndc = (texelCoord + subPixelOffset) / imageResultSize * 2.0 - 1.0;

        value += PerPixel(ndc);
    }

    value /= samplesPerPixel;

    // accumulazione path tracing
    vec4 lastFrameColor = imageLoad(imgOutput, texelCoord).rgba;
    value = mix(lastFrameColor, value, 1.0 / (rendererFrame));

    imageStore(imgOutput, texelCoord, value);
}

vec4 PerPixel(vec2 ndc) {
    Ray ray = CalculateRayFromCamera(inverseProjection, inverseView, cameraPosition, ndc);

    Material material;
    vec3 light = vec3(0.0);
    vec3 contribution = vec3(1.0);
    float rayProbability;
    bool isRefractive;
    bool isSpecular;

    for(int i = 0; i < rayDepth; i++) {
        HitInfo hit = TraceRay(ray);

        if(hit.HitDistance < 0.0) {
            light += BackgroundColor * contribution;
            break;
        }

        if(hit.ObjectType == 0)
            material = Materials[int(Spheres[hit.ObjectIndex].Mat)];
        else if(hit.ObjectType == 1)
            material = Materials[int(Cuboids[hit.ObjectIndex].MaterialIndex)];

        if(hit.Inside) {
            hit.Normal *= -1.0;
            contribution *= exp(-vec3(material.RefractionColor) * hit.HitDistance);
        }

        rayProbability = BSDF(ray, hit, material, isRefractive, isSpecular);

        light += (vec3(material.EmissiveColor) * material.EmissiveStrenght) * contribution;

        if(!isRefractive) {
            contribution *= mix(vec3(material.Color), vec3(material.SpecularColor), isSpecular ? 1.0 : 0.0);
        }

        contribution /= rayProbability;

        // if(material.RefractionRatio > 1.0) {
        //     // vec3 unitDirection = normalize(ray.Direction);
        //     // float ni_over_nt = dot(unitDirection, hit.Normal) > 0 ? material.RefractionRatio : 1.0 / material.RefractionRatio;
        //     // vec3 refractedDir = refract(unitDirection, hit.Normal, ni_over_nt);

        //     // if(length(refractedDir) > 0.0) {
        //     //     vec3 newRayOrigin = hit.HitPosition + refractedDir * 0.0001;
        //     //     vec3 newRayDir = refractedDir;

        //     //     ray = Ray(newRayOrigin, newRayDir);
        //     // } else {
        //     //     // total internal reflection
        //     //     vec3 reflectedDirection = reflect(unitDirection, hit.Normal);
        //     //     vec3 newRayOrigin = hit.HitPosition + reflectedDirection * 0.0001;
        //     //     vec3 newRayDir = refractedDir;

        //     //     ray = Ray(newRayOrigin, newRayDir);
        //     // }

        //     vec3 unitDirection = normalize(ray.Direction);
        //     float ni_over_nt = dot(unitDirection, hit.Normal) > 0 ? material.RefractionRatio : 1.0 / material.RefractionRatio;
        //     float cosTheta = min(dot(-unitDirection, hit.Normal), 1.0);
        //     float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

        //     bool cannotRefract = ni_over_nt * sinTheta > 1.0;
        //     vec3 newRayDir, newRayOrigin;

        //     if(cannotRefract || Schlick(cosTheta, ni_over_nt) > GetRandomFloat())
        //         newRayDir = reflect(unitDirection, hit.Normal);
        //     else
        //         newRayDir = refract(unitDirection, hit.Normal, ni_over_nt);

        //     newRayOrigin = hit.HitPosition + newRayOrigin * 0.0001;

        //     ray = Ray(newRayOrigin, newRayDir);

        //     light += (vec3(material.EmissiveColor) * material.EmissiveStrenght) * contribution;
        //     contribution *= vec3(material.Color);
        // } else {
        //     float doSpecular = (GetRandomFloat() < material.SpecularProbability) ? 1.0 : 0.0;

        //     vec3 diffuse = normalize(hit.Normal + GetRandomVector(rndSeed));
        //     vec3 specular = reflect(ray.Direction, hit.Normal);
        //     specular = normalize(mix(specular, diffuse, material.Roughness * material.Roughness));

        //     vec3 newRayOrigin = hit.HitPosition + hit.Normal * 0.0001;
        //     vec3 newRayDir = normalize(mix(diffuse, specular, doSpecular));

        //     ray = Ray(newRayOrigin, newRayDir);

        //     light += (vec3(material.EmissiveColor) * material.EmissiveStrenght) * contribution;
        //     contribution *= mix(vec3(material.Color), vec3(material.SpecularColor), doSpecular);
        // }

    }

    return vec4(light, 1.0);
}

float BSDF(inout Ray ray, HitInfo hit, Material material, out bool isRefractive, out bool isSpecular) {
    isRefractive = false;
    isSpecular = false;

    float rayProbability = 1.0;
    float specularProbability = material.SpecularProbability;
    float refractionProbability = material.RefractionProbability;

    if(specularProbability > 0.0) {
        specularProbability = FresnelSchlick(
        hit.Inside ? material.RefractionRatio : 1.0,
        !hit.Inside ? material.RefractionRatio : 1.0,
        ray.Direction, hit.Normal, material.SpecularProbability, 1.0
        );

        float probabilityMultiplier = (1.0 - specularProbability) / (1.0 - material.SpecularProbability);
        refractionProbability *= probabilityMultiplier;
    }

    float doSpecular = 0.0;
    float doRefraction = 0.0;
    float raySelectRoll = GetRandomFloat();

    if(specularProbability > 0.0 && raySelectRoll < specularProbability) {
        doSpecular = 1.0;
        isSpecular = true;
        rayProbability = specularProbability;
    } else if(refractionProbability > 0.0 && raySelectRoll < specularProbability + refractionProbability) {
        doRefraction = 1.0;
        isRefractive = true;
        rayProbability = refractionProbability;
    } else {
        rayProbability = 1.0 - (specularProbability + refractionProbability);
    }

    rayProbability = max(rayProbability, 0.001);

    if(doRefraction == 1.0) {
        ray.Origin = (ray.Origin + ray.Direction * hit.HitDistance) - hit.Normal * 0.001;
    } else {
        ray.Origin = (ray.Origin + ray.Direction * hit.HitDistance) + hit.Normal * 0.001;
    }

    vec3 diffuseDirection = normalize(hit.Normal + GetRandomVector(rndSeed));

    vec3 specularDirection = reflect(ray.Direction, hit.Normal);
    specularDirection = normalize(mix(specularDirection, diffuseDirection, material.Roughness * material.Roughness));

    vec3 refractionDirection = refract(ray.Direction, hit.Normal, hit.Inside ? material.RefractionRatio : 1.0 / material.RefractionRatio);
    refractionDirection = normalize(mix(refractionDirection, normalize(-hit.Normal + GetRandomVector(rndSeed)), material.RefractionRoughness * material.RefractionRoughness));

    ray.Direction = mix(diffuseDirection, specularDirection, doSpecular);
    ray.Direction = mix(ray.Direction, refractionDirection, doRefraction);

    return rayProbability;
}

HitInfo TraceRay(Ray ray) {
    float hitDistance = 100000.0;
    int index = -1;
    int objType = -1; // 0 Sphere, 1 Cuboid
    float t1, t2;
    bool inside;

    for(int i = 0; i < Spheres.length(); i++) {
        Sphere sphere = Spheres[i];

        if(HitSphere(ray, sphere, t1, t2) && t2 > 0.0 && t1 < hitDistance) {
            hitDistance = t1 < 0 ? t2 : t1;
            index = i;
            inside = hitDistance == t2;
            objType = 0;
        }

        // float distance = HitSphere(ray, sphere, t1, t2);

        // if(distance >= 0 && distance < hitDistance) {
        //     hitDistance = distance;
        //     index = i;
        //     objType = 0;
        // }
    }

    for(int i = 0; i < Cuboids.length(); i++) {
        Cuboid cuboid = Cuboids[i];

        float distance = HitQuad(ray, cuboid);

        if(distance >= 0 && distance < hitDistance) {
            hitDistance = distance;
            index = i;
            objType = 1;
            inside = false;
        }
    }

    if(index < 0) {
        HitInfo result = NoHit();
        return result;
    }

    return HandleHit(ray, hitDistance, index, objType, inside);
}

HitInfo HandleHit(Ray ray, float hitDistance, int index, int objType, bool insideHit) {
    HitInfo hit;

    if(objType == 0) { // SPHERE
        vec3 spherePos = vec3(Spheres[index].Position);

        vec3 origin = ray.Origin - spherePos;
        vec3 closestPosition = spherePos;
        vec3 hitPosition = origin + ray.Direction * hitDistance;
        vec3 normal = normalize(hitPosition);
        hitPosition += closestPosition;

        hit = HitInfo(hitDistance, hitPosition, normal, index, 0, insideHit);
    } else if(objType == 1) { // CUBOID
        vec3 origin = ray.Origin - vec3(Cuboids[index].PositionLLC);
        vec3 closestPosition = vec3(Cuboids[index].PositionLLC);
        vec3 hitPosition = origin + ray.Direction * hitDistance;
        vec3 normal = GetNormal(Cuboids[index], hitPosition);
        hitPosition += closestPosition;

        hit = HitInfo(hitDistance, hitPosition, normal, index, 1, insideHit);
    }

    return hit;
}

HitInfo NoHit() {
    return HitInfo(-1.0, vec3(0.0), vec3(0.0), -1, -1, false);
}

bool HitSphere(Ray ray, Sphere sphere, out float t1, out float t2) {
    vec3 spherePos = vec3(sphere.Position);
    float radius = sphere.Position.w;

    vec3 oc = ray.Origin - spherePos;
    float a = dot(ray.Direction, ray.Direction);
    float b = 2.0 * dot(oc, ray.Direction);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b * b - 4.0 * a * c;

    if(discriminant < 0.0)
        return false;

    t1 = (-b - sqrt(discriminant)) / (2.0 * a);
    t2 = (-b + sqrt(discriminant)) / (2.0 * a);

    return t1 <= t2;
}

float HitQuad(Ray ray, Cuboid cuboid) {
    vec3 normal = normalize(cross(vec3(cuboid.U), vec3(cuboid.V)));
    float d = dot(normal, vec3(cuboid.PositionLLC));
    vec3 w = normal / (dot(normal, normal) + 0.0001);

    float denom = dot(normal, ray.Direction);
    
    // no hit if the ray is parallel to the plane
    if (abs(denom) < 1e-8)
        return -1.0;

    float t = (d - dot(normal, ray.Origin)) / denom;
    if (t < 0.001 || t > uintBitsToFloat(0x7F800000))
        return -1.0;

    vec3 intersection = ray.Origin + (t * ray.Direction);
    vec3 planar_hitpt_vector = intersection - vec3(cuboid.PositionLLC);
    float alpha = dot(w, cross(planar_hitpt_vector, vec3(cuboid.V)));
    float beta = dot(w, cross(vec3(cuboid.U), planar_hitpt_vector));

    // is not interior
    if ((alpha < 0) || (cuboid.Width < alpha) || (beta < 0) || (cuboid.Height < beta))
        return -1;

    return t;
}

float FresnelSchlick(float n1, float n2, vec3 normal, vec3 incident, float f0, float f90) {
        // Schlick aproximation
        float r0 = (n1-n2) / (n1+n2);
        r0 *= r0;
        float cosX = -dot(normal, incident);
        if (n1 > n2) {
            float n = n1/n2;
            float sinT2 = n*n*(1.0-cosX*cosX);
            // Total internal reflection
            if (sinT2 > 1.0)
                return f90;
            cosX = sqrt(1.0-sinT2);
        }
        float x = 1.0-cosX;
        float ret = r0+(1.0-r0)*x*x*x*x*x;

        // adjust reflect multiplier for object reflectivity
        return mix(f0, f90, ret);
}

float Schlick(float cosine, float ratio) {
	float r0 = (1 - ratio) / (1 + ratio);
	r0 = r0 * r0;
	return r0 + (1 - r0) * pow((1 - cosine), 5);
}

vec3 GetNormal(Cuboid cuboid, vec3 surfacePosition) {
    return normalize(cross(vec3(cuboid.U), vec3(cuboid.V)));
}

Ray CalculateRayFromCamera(mat4 inverseProj, mat4 inverseView, vec3 cameraPos, vec2 ndc) {
    vec4 target = inverseProj * vec4(ndc, 1.0, 1.0);
    vec3 rayDirection = vec3(inverseView * vec4(normalize(vec3(target) / target.w), 0.0));

    return Ray(cameraPos, rayDirection);
}

uint GetPCGHash(inout uint seed) {
    seed = seed * 747796405u + 2891336453u;
    uint word = ((seed >> ((seed >> 28u) + 4u)) ^ seed) * 277803737u;
    return (word >> 22u) ^ word;
}
 
float GetRandomFloat() {
    return float(GetPCGHash(rndSeed)) / 4294967296.0;
}

vec3 GetRandomVector(uint seed) {
    vec3 seedVec = vec3(
        float(seed & 0xFF) / 255.0,
        float((seed >> 8) & 0xFF) / 255.0,
        float((seed >> 16) & 0xFF) / 255.0
    );

    return vec3(
        fract(sin(dot(seedVec, vec3(12.9898, 78.233, 45.543))) * 43758.5453) * 2.0 - 1.0,
        fract(sin(dot(seedVec, vec3(39.3465, 93.535, 23.987))) * 43758.5453) * 2.0 - 1.0,
        fract(sin(dot(seedVec, vec3(67.123, 12.789, 98.456))) * 43758.5453) * 2.0 - 1.0
    );
}