#version 430 core

#define FLT_MAX 3.402823466e+38
#define FLT_MIN 1.175494351e-38

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D imgOutput;

struct Ray {
    vec3 Origin;
    vec3 Direction;
};

struct Sphere {
    vec3 Position;
    float Radius;
    int MaterialIndex;
};

struct Sphere2 {
    vec4 Position;
    vec4 Mat;
};

struct Quad {
    vec3 Position;
};

struct Material {
    vec3 Color;
    float Roughness;
    float SpecularProbability;
    bool Refractive;
    float RefractionRatio;
    float EmissiveStrenght;
    vec3 EmissiveColor;
};

struct HitInfo {
    float HitDistance;
    vec3 HitPosition;
    vec3 Normal;
    int ObjectIndex;
};

Ray CalculateRayFromCamera(mat4 inverseProj, mat4 inverseView, vec3 cameraPos, vec2 ndc);
vec4 PerPixel(vec2 ndc);
HitInfo TraceRay(Ray ray);
HitInfo HandleHit(Ray ray, float hitDistance, int index);
HitInfo NoHit();
float HitSphere(Ray ray, Sphere sphere);
float HitSphere2(Ray ray, Sphere2 sphere);

uniform int width;
uniform int height;
uniform int numberOfSpheres;
uniform int numberOfMaterials;
uniform vec3 cameraPosition;
uniform mat4 inverseProjection;
uniform mat4 inverseView;
uniform vec3 BackgroundColor;

layout(std430, binding = 0) buffer SpheresBuffer {
    Sphere2 Spheres[];
};

layout(std430, binding = 1) buffer MaterialsBuffer {
    Material Materials[];
};

uint rndSeed;

void main() {
    vec4 value = vec4(BackgroundColor, 1.0);
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    vec2 ndc = (2.0 * vec2(texelCoord) / imageSize(imgOutput)) - 1.0;

    // Ray ray = CalculateRayFromCamera(inverseProjection, inverseView, cameraPosition, ndc);

    // Sphere2 sphere = Spheres[0];

    // float distance = HitSphere2(ray, sphere);

    // if(distance > 0) {
    //     vec3 hitPoint = ray.Origin + ray.Direction * distance;
    //     vec3 normal = normalize(hitPoint);

    //     vec3 lightDir = normalize(vec3(-1.0, -1.0, -1.0));
    //     float d = max(dot(normal, -lightDir), 0.0);

    //     vec3 sphereColor = Materials[int(sphere.Mat.x)].Color;
    //     sphereColor *= d; 

    //     value = vec4(clamp(sphereColor, 0.0, 1.0), 1.0);
    // }

    value = PerPixel(ndc);

    imageStore(imgOutput, texelCoord, value);
}

vec4 PerPixel(vec2 ndc) {
    Ray ray = CalculateRayFromCamera(inverseProjection, inverseView, cameraPosition, ndc);

    int depth = 5;
    float multiplier = 1.0;
    vec3 light = vec3(0.0);

    for(int i = 0; i < depth; i++) {
        HitInfo hit = TraceRay(ray);

        if(hit.HitDistance < 0.0) {
            light += BackgroundColor * multiplier;
            break;
        }

        vec3 lightDir = normalize(vec3(-1.0, -1.0, -1.0));
        float lightIntensity = max(dot(hit.Normal, -lightDir), 0.0);

        Sphere2 sphere = Spheres[hit.ObjectIndex];
        Material material = Materials[int(sphere.Mat.x)];

        vec3 sphereColor = material.Color;
        sphereColor *= lightIntensity;

        multiplier *= 0.5;

        vec3 newRayOrigin = hit.HitPosition + hit.Normal * 0.0001;
        vec3 newRayDir = reflect(ray.Direction, hit.Normal);

        ray = Ray(newRayOrigin, newRayDir);
    }

    // HitInfo hit = TraceRay(ray);
    // if(hit.HitDistance > 0) {
    //     vec3 lightDir = normalize(vec3(-1.0, -1.0, -1.0));
    //     float d = max(dot(hit.Normal, -lightDir), 0.0);
    //     vec3 sphereColor = Materials[0].Color;
    //     sphereColor *= d; 

    //     light = clamp(sphereColor, 0.0, 1.0);
    // } else {
    //     light = BackgroundColor;
    // }

    return vec4(light, 1.0);
}

HitInfo TraceRay(Ray ray) {
    float hitDistance = 100000.0;
    int index = -1;

    for(int i = 0; i < Spheres.length(); i++) {
        Sphere2 sphere = Spheres[i];

        float distance = HitSphere2(ray, sphere);

        if(distance >= 0 && distance < hitDistance) {
            hitDistance = distance;
            index = i;
        }
    }

    if(index < 0) {
        HitInfo result = NoHit();
        return result;
    }

    HitInfo result = HandleHit(ray, hitDistance, index);
    return result;
}

HitInfo HandleHit(Ray ray, float hitDistance, int index) {
    vec3 spherePos = vec3(Spheres[index].Position.x, Spheres[index].Position.y, Spheres[index].Position.z);

    vec3 origin = ray.Origin - spherePos;
    vec3 closestPosition = spherePos;
    vec3 hitPosition = origin + ray.Direction * hitDistance;
    vec3 normal = normalize(hitPosition);
    hitPosition += closestPosition;

    HitInfo hit = HitInfo(hitDistance, hitPosition, normal, index);
    return hit;
}

HitInfo NoHit() {
    return HitInfo(-1.0, vec3(0.0), vec3(0.0), -1);
}

float HitSphere(Ray ray, Sphere sphere) {
    vec3 oc = ray.Origin - sphere.Position;

    float a = dot(ray.Direction, ray.Direction);
    float b = 2.0 * dot(ray.Origin, ray.Direction);
    float c = dot(ray.Origin, ray.Origin) - sphere.Radius * sphere.Radius;
    float discriminant = b * b - 4.0 * a * c;

    if(discriminant < 0.0)
        return -1.0;

    float closestT = (-b - sqrt(discriminant)) / (2.0 * a);

    return closestT;
}

float HitSphere2(Ray ray, Sphere2 sphere) {
    // vec3 spherePos = vec3(sphere.Position.x, sphere.Position.y, sphere.Position.z);
    vec3 spherePos = vec3(sphere.Position);
    float radius = sphere.Position.w;

    vec3 oc = ray.Origin - spherePos;
    float a = dot(ray.Direction, ray.Direction);
    float b = 2.0 * dot(oc, ray.Direction);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b * b - 4.0 * a * c;

    if(discriminant < 0.0)
        return -1.0;

    float closestT = (-b - sqrt(discriminant)) / (2.0 * a);

    return closestT;
}

Ray CalculateRayFromCamera(mat4 inverseProj, mat4 inverseView, vec3 cameraPos, vec2 ndc) {
    vec4 target = inverseProj * vec4(ndc, 1.0, 1.0);
    vec3 rayDirection = vec3(inverseView * vec4(normalize(vec3(target) / target.w), 0.0));

    return Ray(cameraPos, rayDirection);
}