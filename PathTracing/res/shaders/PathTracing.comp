#version 430 core

#define FLOAT_MAX 3.4028235e+38
#define FLOAT_MIN -3.4028235e+38
#define EPSILON 0.001
#define PI              3.1415926
#define INF             114514.0
#define SIZE_BVHNODE    4

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D imgOutput;
layout(rgba32f, binding = 1) uniform image2D test;
uniform samplerCube SamplerEnvironment;

struct BVHNode {
    vec4 AABBMin;
    vec4 AABBMax;
    float LeftFirst;
    float TriCount;
};

struct BVHNodeAlt {
	vec4 AA;
	vec4 BB;
	float left;
	float right;
	float n;
	float index;
};

struct Ray {
    vec3 Origin;
    vec3 Direction;
    float t;
};

struct Sphere {
    vec4 Position;
    float Mat;
};

struct Quad {
	vec4 PositionLLC;
	vec4 U;
	vec4 V;
	float MaterialIndex;
	float Width;
	float Height;
};

struct CubeInfo {
    vec4 BoundsMin;
    vec4 BoundsMax;
    float FirstQuad;
};

struct MeshInfo {
    vec4 Position;
    vec4 BoundsMin;
    vec4 BoundsMax;
    float FirstTriangle;
    float NumTriangles;
    float MaterialIndex;
};

struct Triangle {
    vec4 A;
    vec4 B;
    vec4 C;
    vec4 NormalA;
    vec4 NormalB;
    vec4 NormalC;
};

struct Material {
    vec4 Color;
    float Roughness;
    float SpecularProbability;
    float RefractionRatio;
    float EmissiveStrenght;
    vec4 EmissiveColor;
	vec4 SpecularColor;
	float RefractionProbability;
	float RefractionRoughness;
	vec4 RefractionColor;
};

struct HitInfo {
    float HitDistance;
    vec3 HitPosition;
    vec3 Normal;
    int ObjectIndex;
    int ObjectType;
    bool Inside;
};

Ray CalculateRayFromCamera(mat4 inverseProj, mat4 inverseView, vec3 cameraPos, vec2 ndc);
vec4 PerPixel(vec2 ndc);
float BSDF(inout Ray ray, HitInfo hit, Material material, out bool isRefractive, out bool isSpecular);
HitInfo TraceRay(Ray ray);
HitInfo HandleHit(Ray ray, float hitDistance, int index, int objType, bool insideHit, float u, float v);
HitInfo NoHit();
bool HitSphere(Ray ray, Sphere sphere, out float t1, out float t2);
float HitQuad(Ray ray, Quad quad);
float HitTriangle(Ray ray, Triangle triangle, vec3 position, out float u, out float v);
bool HitBoundingBox(Ray ray, vec3 boxMin, vec3 boxMax, vec3 position);
float FresnelSchlick(float n1, float n2, vec3 normal, vec3 incident, float f0, float f90);
vec3 GetNormal(Quad quad, vec3 surfacePosition);
uint GetPCGHash(inout uint seed);
float GetRandomFloat();
vec3 GetRandomVector(uint seed);

void hitBVH(inout Ray ray);
float hitTri(inout Ray ray, Triangle triangle);
float hitAABB(inout Ray ray, vec4 bmin, vec4 bmax);
float hitAABBAlt(inout Ray ray, vec3 AA, vec3 BB);
float hitArray(inout Ray ray, int l, int r);
float hitBVHAlt(inout Ray ray);

int rootNodeIndex = 0;

uniform int nNodes;
uniform int width;
uniform int height;
uniform int rendererFrame;
uniform int samplesPerPixel;
uniform int rayDepth;
uniform vec3 cameraPosition;
uniform mat4 inverseProjection;
uniform mat4 inverseView;
uniform vec3 BackgroundColor;
uniform bool EnvironmentMapping;

layout(std430, binding = 0) buffer SpheresBuffer {
    Sphere Spheres[];
};

layout(std430, binding = 1) buffer MaterialsBuffer {
    Material Materials[];
};

layout(std430, binding = 2) buffer QuadsBuffer {
    Quad Quads[];
};

layout(std430, binding = 3) buffer TrianglesBuffer {
    Triangle Triangles[];
};

layout(std430, binding = 4) buffer MeshBuffer {
    MeshInfo Meshes[];
};

layout(std430, binding = 5) buffer CubeBuffer {
    CubeInfo Cubes[];
};

layout(std430, binding = 6) buffer TriIndexBuffer {
    int TriIndex[];
};

layout(std430, binding = 7) buffer BVHBuffer {
    BVHNodeAlt BVHNodes[];
};

uint rndSeed;

void main() {
    ivec2 imageResultSize = imageSize(imgOutput);
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    rndSeed = gl_GlobalInvocationID.x * 1973 + gl_GlobalInvocationID.y * 9277 + rendererFrame * 2699 | 1;

    vec4 value = vec4(0.0, 0.0, 0.0, 1.0);
    for(int i = 0; i < samplesPerPixel; i++) {
        // anti aliasing
        vec2 subPixelOffset = vec2(GetRandomFloat(), GetRandomFloat());
        vec2 ndc = (texelCoord + subPixelOffset) / imageResultSize * 2.0 - 1.0;

        value += PerPixel(ndc);
    }

    value /= samplesPerPixel;

    // accumulazione path tracing
    vec4 lastFrameColor = imageLoad(imgOutput, texelCoord).rgba;
    value = mix(lastFrameColor, value, 1.0 / (rendererFrame));

    imageStore(imgOutput, texelCoord, value);

    imageStore(test, texelCoord, vec4(1, 0, 0, 1));
}

vec4 PerPixel(vec2 ndc) {
    Ray ray = CalculateRayFromCamera(inverseProjection, inverseView, cameraPosition, ndc);

    Material material;
    vec3 light = vec3(0.0);         // colore finale del pixel dato dall'accumulazione
    vec3 contribution = vec3(1.0);  // contributo di ogni intersezione al colore finale
    float rayProbability;
    bool isRefractive;
    bool isSpecular;

    for(int i = 0; i < rayDepth; i++) {
        HitInfo hit = TraceRay(ray);

        if(hit.HitDistance < 0.0) {
            if(EnvironmentMapping)
				light += texture(SamplerEnvironment, ray.Direction).rgb * contribution;
            else
				light += BackgroundColor * contribution;
            break;
        }

        if(hit.ObjectType == 0)
            material = Materials[int(Spheres[hit.ObjectIndex].Mat)];
        else if(hit.ObjectType == 1)
            material = Materials[int(Quads[hit.ObjectIndex].MaterialIndex)];
        else if(hit.ObjectType == 2)
            material = Materials[int(Meshes[hit.ObjectIndex].MaterialIndex)];

        if(hit.Inside) {
            hit.Normal *= -1.0;
            // attenuation, Beer-Lambert law -> intesità di luce diminuisce exp con la distanza percorsa attraverso il materiale
            contribution *= exp(-vec3(material.RefractionColor) * hit.HitDistance);
        }

        rayProbability = BSDF(ray, hit, material, isRefractive, isSpecular);

        light += (vec3(material.EmissiveColor) * material.EmissiveStrenght) * contribution;

        if(!isRefractive) {
            contribution *= mix(vec3(material.Color), vec3(material.SpecularColor), isSpecular ? 1.0 : 0.0);
        }

        // normalizzazione del colore in base alla probabilità del raggio, in modo da avere una rappresentazione accurata dell'intensità di lice che rggiunge il pixel
        contribution /= rayProbability;

        // Russian Roulette
        // i raggi di luce con un basso contributo al colore vengono scartati
        {
            float p = max(contribution.x, max(contribution.y, contribution.z));
            if(GetRandomFloat() > p)
                break;

            // se il percorso non viene terminato allora si reintegra l'energia persa dai percorsi terminati
            contribution *= 1.0 / p;
        }
    }

    return vec4(light, 1.0);
}

float BSDF(inout Ray ray, HitInfo hit, Material material, out bool isRefractive, out bool isSpecular) {
    isRefractive = false;
    isSpecular = false;

    float rayProbability = 1.0;
    float specularProbability = material.SpecularProbability;
    float refractionProbability = material.RefractionProbability;

    if(specularProbability > 0.0) {
        specularProbability = FresnelSchlick(
            hit.Inside ? material.RefractionRatio : 1.0,
            !hit.Inside ? material.RefractionRatio : 1.0,
            ray.Direction, hit.Normal, material.SpecularProbability, 1.0
        );

        float probabilityMultiplier = (1.0 - specularProbability) / (1.0 - material.SpecularProbability);
        refractionProbability *= probabilityMultiplier;
    }

    float doSpecular = 0.0;
    float doRefraction = 0.0;
    float raySelectRoll = GetRandomFloat();

    if(specularProbability > 0.0 && raySelectRoll < specularProbability) {
        doSpecular = 1.0;
        isSpecular = true;
        rayProbability = specularProbability;
    } else if(refractionProbability > 0.0 && raySelectRoll < specularProbability + refractionProbability) {
        doRefraction = 1.0;
        isRefractive = true;
        rayProbability = refractionProbability;
    } else {
        rayProbability = 1.0 - (specularProbability + refractionProbability);
    }

    rayProbability = max(rayProbability, 0.001);

    if(doRefraction == 1.0) {
        ray.Origin = (ray.Origin + ray.Direction * hit.HitDistance) - hit.Normal * 0.001;
    } else {
        ray.Origin = (ray.Origin + ray.Direction * hit.HitDistance) + hit.Normal * 0.001;
    }

    vec3 diffuseDirection = normalize(hit.Normal + GetRandomVector(rndSeed));

    vec3 specularDirection = reflect(ray.Direction, hit.Normal);
    specularDirection = normalize(mix(specularDirection, diffuseDirection, material.Roughness * material.Roughness));

    vec3 refractionDirection = refract(ray.Direction, hit.Normal, hit.Inside ? material.RefractionRatio : 1.0 / material.RefractionRatio);
    refractionDirection = normalize(mix(refractionDirection, normalize(-hit.Normal + GetRandomVector(rndSeed)), material.RefractionRoughness * material.RefractionRoughness));

    ray.Direction = mix(diffuseDirection, specularDirection, doSpecular);
    ray.Direction = mix(ray.Direction, refractionDirection, doRefraction);

    return rayProbability;
}

void hitBVH(inout Ray ray) {
/*
    uint nodeIndex = rootNodeIndex;
    uint stack[64];
    uint stackPtr = 0;

    while(true) {
        BVHNode node = BVHNodes[nodeIndex];

        if(node.TriCount > 0) {
            for(uint i = 0; i < node.TriCount; i++) {
                hitTri(ray, Triangles[TriIndex[int(node.LeftFirst) + i]]);
            }

            if(stackPtr == 0)
                break;
            else
                nodeIndex = stack[--stackPtr];

            continue;
        }

        BVHNode child1 = BVHNodes[int(node.LeftFirst)];
        BVHNode child2 = BVHNodes[int(node.LeftFirst + 1)];

        float dist1 = hitAABB(ray, child1.AABBMin, child1.AABBMax);
        float dist2 = hitAABB(ray, child2.AABBMin, child2.AABBMax);

        if(dist1 > dist2) {
            float tempDist = dist1; 
            dist1 = dist2; 
            dist2 = tempDist;

            BVHNode tempNode = child1;
            child1 = child2; 
            child2 = tempNode;
        }

        if(dist1 == 10000000) {
            if(stackPtr == 0)
                break;
            else
                nodeIndex = stack[--stackPtr];
        }
        else {
            nodeIndex = int(node.LeftFirst);
            if(dist2 != 10000000)
                stack[stackPtr++] = int(node.LeftFirst) + 1;
        }
    }
    */
}

float hitAABBAlt(inout Ray ray, vec3 AA, vec3 BB) {
    vec3 invdir = 1.0 / ray.Direction;
    vec3 f = (BB - ray.Origin) * invdir;
    vec3 n = (AA - ray.Origin) * invdir;
    vec3 tmax = max(f, n);
    vec3 tmin = min(f, n);
    float t1 = min(tmax.x, min(tmax.y, tmax.z));
    float t0 = max(tmin.x, max(tmin.y, tmin.z));

    return (t1 >= t0) ? ((t0 > 0.0) ? (t0) : (t1)) : (-1);
}


float hitArray(inout Ray ray, int l, int r) {
    float hitDist = INF;

    for(int i = l; i <= r; i++) {
        Triangle triangle = Triangles[i];
        float distance = hitTri(ray, triangle);

        if(distance < hitDist) {
            hitDist = distance;
        }
    }

    return hitDist;
}

float hitBVHAlt(inout Ray ray) {
    float hitDist = INF;

    int stack[256];
    int sp = 0;

    stack[sp++] = 1;

    while(sp > 0) {
        int top = stack[--sp];
        BVHNodeAlt node = BVHNodes[top];

        if(node.n > 0) {
            int L = int(node.index);
            int R = int(node.index) + int(node.n) - 1;
            float distance = hitArray(ray, L, R);
            if(distance < hitDist) {
                hitDist = distance;
            }
            continue;
        }

        float d1 = INF;
        float d2 = INF;

        if(node.left > 0) {
            BVHNodeAlt leftNode = BVHNodes[int(node.left)];
            d1 = hitAABBAlt(ray, vec3(leftNode.AA), vec3(leftNode.BB));
        }

        if(node.right > 0) {
            BVHNodeAlt rightNode = BVHNodes[int(node.right)];
            d2 = hitAABBAlt(ray, vec3(rightNode.AA), vec3(rightNode.BB));
        }

        if(d1 > 0 && d2 < 0) {
            if(d1 < d2) {
                stack[sp++] = int(node.right);
                stack[sp++] = int(node.left);
            } else {
                stack[sp++] = int(node.left);
                stack[sp++] = int(node.right);
            }
        } else if(d1 > 0) {
            stack[sp++] = int(node.left);
        } else if(d2 > 0) {
            stack[sp++] = int(node.right);
        }
    }

    return hitDist;
}

float hitAABB(inout Ray ray, vec4 bmin, vec4 bmax) {
	float tx1 = (bmin.x - ray.Origin.x) / ray.Direction.x;
    float tx2 = (bmax.x - ray.Origin.x) / ray.Direction.x;
    float tmin = min(tx1, tx2);
    float tmax = min(tx1, tx2);

	float ty1 = (bmin.y - ray.Origin.y) / ray.Direction.y;
    float ty2 = (bmax.y - ray.Origin.y) / ray.Direction.y;
    tmin = max(tmin, min(ty1, ty2));
    tmax = min(tmax, max(ty1, ty2));

	float tz1 = (bmin.z - ray.Origin.z) / ray.Direction.z;
    float tz2 = (bmax.z - ray.Origin.z) / ray.Direction.z;
    tmin = max(tmin, min(tz1, tz2));
    tmax = min(tmax, max(tz1, tz2));

    if(tmax >= tmin && tmin < ray.t && tmax > 0)
        return tmin;
    else 
		return 10000000;
}

float hitTri(inout Ray ray, Triangle triangle) {
    vec3 edge1 = vec3(triangle.B) - vec3(triangle.A);
    vec3 edge2 = vec3(triangle.C) - vec3(triangle.A);
    vec3 h = cross(ray.Direction, edge2);
    float a = dot(edge1, h);

    if(a > -0.0001 && a < 0.0001)
        return -1;

    float f = 1 / a;
    vec3 s = ray.Origin - vec3(triangle.A);
    float u = f * dot(s, h);

    if(u < 0 || u > 1)
		return -1;

    vec3 q = cross(s, edge1);
    float v = f * dot(ray.Direction, q);

    if(v < 0 || u + v > 1)
        return -1;

    float t = f * dot(edge2, q);

    if(t > 0.0001)
        ray.t = min(ray.t, t);

	return t;
}


HitInfo TraceRay(Ray ray) {
    float hitDistance = 100000.0;
    int index = -1;
    int objType = -1; // 0 Sphere, 1 Quad, 2 Mesh
    float t1, t2;
    float u = 0, v = 0;
    bool inside;
    bool cubesPres = Cubes.length() > 0;

    for(int i = 0; i < Spheres.length(); i++) {
        Sphere sphere = Spheres[i];

        if(HitSphere(ray, sphere, t1, t2) && t2 > 0.0 && t1 < hitDistance) {
            hitDistance = t1 < 0 ? t2 : t1;
            index = i;
            inside = hitDistance == t2;
            objType = 0;
        }
    }

    int j = 0;
    for(int i = 0; i < Quads.length(); i++) {
        if (cubesPres && j < Cubes.length() && Cubes[j].FirstQuad == i){
            bool hit = HitBoundingBox(ray, vec3(Cubes[j].BoundsMin), vec3(Cubes[j].BoundsMax), vec3(0));
            j++;
            if (!hit) {
                i+=5;
                continue;
            }
        }
        Quad quad = Quads[i];

        float distance = HitQuad(ray, quad);

        if(distance >= 0 && distance < hitDistance) {
            hitDistance = distance;
            index = i;
            objType = 1;
            inside = false;
        }
    }

    for(int i = 0; i < Meshes.length(); i++) {
    /*
        MeshInfo mesh = Meshes[i];

        if(!HitBoundingBox(ray, vec3(mesh.BoundsMin), vec3(mesh.BoundsMax), vec3(mesh.Position))) {
            continue;
        }

        for(int j = int(mesh.FirstTriangle); j < mesh.FirstTriangle + mesh.NumTriangles; j++) {
            Triangle triangle = Triangles[j];

            float distance = HitTriangle(ray, triangle, vec3(mesh.Position), u, v);
            //float distance = hitTri(ray, triangle);

            if(distance >= 0 && distance < hitDistance) {
                hitDistance = distance;
                index = i;
                objType = 2;
                inside = false;
            }
        }
    */

        /*
        hitBVH(ray);
        float distance = ray.t;

        if(distance >= 0 && distance < hitDistance) {
            hitDistance = distance;
            index = i;
            objType = 2;
            inside = false;
        }

        float distance = hitBVHAlt(ray);
        if(distance >= 0 && distance < hitDistance) {
            hitDistance = distance;
            index = i;
            objType = 2;
            inside = false;
        }
        */
    }


    if(index < 0) {
        HitInfo result = NoHit();
        return result;
    }

    return HandleHit(ray, hitDistance, index, objType, inside, u, v);
}

HitInfo HandleHit(Ray ray, float hitDistance, int index, int objType, bool insideHit, float u, float v) {
    HitInfo hit;

    if(objType == 0) { // SPHERE
        vec3 spherePos = vec3(Spheres[index].Position);

        vec3 origin = ray.Origin - spherePos;
        vec3 closestPosition = spherePos;
        vec3 hitPosition = origin + ray.Direction * hitDistance;
        vec3 normal = normalize(hitPosition);
        hitPosition += closestPosition;

        hit = HitInfo(hitDistance, hitPosition, normal, index, 0, insideHit);
    } 
    else if(objType == 1) { // QUAD
        vec3 origin = ray.Origin - vec3(Quads[index].PositionLLC);
        vec3 closestPosition = vec3(Quads[index].PositionLLC);
        vec3 hitPosition = origin + ray.Direction * hitDistance;
        vec3 normal = GetNormal(Quads[index], hitPosition);
        hitPosition += closestPosition;

        hit = HitInfo(hitDistance, hitPosition, normal, index, 1, insideHit);
    } 
    else if(objType == 2) { // MESH
        vec3 meshPos = vec3(Meshes[index].Position);
        vec3 origin = ray.Origin - meshPos;
        vec3 closestPosition = meshPos;
        vec3 hitPosition = origin + ray.Direction * hitDistance;
        hitPosition += closestPosition;
        float w = 1 - u - v;
        vec4 normal = normalize(Triangles[index].NormalA * w + Triangles[index].NormalB * u + Triangles[index].NormalC * v);

        hit = HitInfo(hitDistance, hitPosition, vec3(normal), index, 2, insideHit);
    }

    return hit;
}

HitInfo NoHit() {
    return HitInfo(-1.0, vec3(0.0), vec3(0.0), -1, -1, false);
}

bool HitSphere(Ray ray, Sphere sphere, out float t1, out float t2) {
    vec3 spherePos = vec3(sphere.Position);
    float radius = sphere.Position.w;

    vec3 oc = ray.Origin - spherePos;
    float a = dot(ray.Direction, ray.Direction);
    float b = 2.0 * dot(oc, ray.Direction);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b * b - 4.0 * a * c;

    if(discriminant < 0.0)
        return false;

    t1 = (-b - sqrt(discriminant)) / (2.0 * a);
    t2 = (-b + sqrt(discriminant)) / (2.0 * a);

    return t1 <= t2;
}

float HitQuad(Ray ray, Quad quad) {
    vec3 normal = normalize(cross(vec3(quad.U), vec3(quad.V)));
    float d = dot(normal, vec3(quad.PositionLLC));
    vec3 w = normal / (dot(normal, normal) + 0.0001);

    float denom = dot(normal, ray.Direction);
    
    // no hit if the ray is parallel to the plane
    if (abs(denom) < 1e-8)
        return -1.0;

    float t = (d - dot(normal, ray.Origin)) / denom;
    if (t < 0.001 || t > uintBitsToFloat(0x7F800000))
        return -1.0;

    vec3 intersection = ray.Origin + (t * ray.Direction);
    vec3 planar_hitpt_vector = intersection - vec3(quad.PositionLLC);
    float alpha = dot(w, cross(planar_hitpt_vector, vec3(quad.V)));
    float beta = dot(w, cross(vec3(quad.U), planar_hitpt_vector));

    // is not interior
    if ((alpha < 0) || (quad.Width < alpha) || (beta < 0) || (quad.Height < beta))
        return -1;

    if (dot(ray.Direction, normal) > 0)
        normal = -normal;

    return t;
}

float HitTriangle(Ray ray, Triangle triangle, vec3 position, out float u, out float v) {
    vec3 A = vec3(triangle.A) + position;
    vec3 B = vec3(triangle.B) + position;
    vec3 C = vec3(triangle.C) + position;

    vec3 edgeAB = vec3(B) - vec3(A);
    vec3 edgeAC = vec3(C) - vec3(A);
    vec3 normalVector = cross(edgeAB, edgeAC);
    vec3 ao = ray.Origin - vec3(A);
    vec3 dao = cross(ao, ray.Direction);

    float determinant = -dot(ray.Direction, normalVector);
    float invDet = 1 / determinant;
    
    // Calculate dst to triangle & barycentric coordinates of intersection point
    float dst = dot(ao, normalVector) * invDet;
    u = dot(edgeAC, dao) * invDet;
    v = -dot(edgeAB, dao) * invDet;
    float w = 1 - u - v;

    if(determinant >= 1E-6 && dst >= 0 && u >= 0 && v >= 0 && w >= 0)
        return dst;
    
    return -1.0;
}

bool HitBoundingBox(Ray ray, vec3 boxMin, vec3 boxMax, vec3 position) {
    vec3 origin = ray.Origin - position;

    vec3 invDir = 1 / ray.Direction;
    vec3 tMin = (boxMin - origin) * invDir;
    vec3 tMax = (boxMax - origin) * invDir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);

    return tNear <= tFar;
}

/*
*  n1: indice di rifrazione del materiale da cui proviene il raggio
*  n2: indice di rifrazione del materiale in cui entra il raggio
*  f0: valore di riflettanza del materiale ad angolo 0
*  f90: valore di riflettanza del materiale ad angolo 90
*/
float FresnelSchlick(float n1, float n2, vec3 normal, vec3 incident, float f0, float f90) {
        // Schlick aproximation
        float r0 = (n1-n2) / (n1+n2);
        r0 *= r0;
        float cosX = -dot(normal, incident);
        if (n1 > n2) {
            float n = n1/n2;
            float sinT2 = n*n*(1.0-cosX*cosX);
            // Total internal reflection
            if (sinT2 > 1.0)
                return f90;
            cosX = sqrt(1.0-sinT2);
        }
        float x = 1.0-cosX;
        float ret = r0+(1.0-r0)*x*x*x*x*x;

        // adjust reflect multiplier for object reflectivity
        return mix(f0, f90, ret);
}

vec3 GetNormal(Quad quad, vec3 surfacePosition) {
    return normalize(cross(vec3(quad.U), vec3(quad.V)));
}

Ray CalculateRayFromCamera(mat4 inverseProj, mat4 inverseView, vec3 cameraPos, vec2 ndc) {
    vec4 target = inverseProj * vec4(ndc, 1.0, 1.0);
    vec3 rayDirection = vec3(inverseView * vec4(normalize(vec3(target) / target.w), 0.0));

    return Ray(cameraPos, rayDirection, 0);
}

uint GetPCGHash(inout uint seed) {
    seed = seed * 747796405u + 2891336453u;
    uint word = ((seed >> ((seed >> 28u) + 4u)) ^ seed) * 277803737u;
    return (word >> 22u) ^ word;
}
 
float GetRandomFloat() {
    return float(GetPCGHash(rndSeed)) / 4294967296.0;
}

vec3 GetRandomVector(uint seed) {
    vec3 seedVec = vec3(
        float(seed & 0xFF) / 255.0,
        float((seed >> 8) & 0xFF) / 255.0,
        float((seed >> 16) & 0xFF) / 255.0
    );

    return vec3(
        fract(sin(dot(seedVec, vec3(12.9898, 78.233, 45.543))) * 43758.5453) * 2.0 - 1.0,
        fract(sin(dot(seedVec, vec3(39.3465, 93.535, 23.987))) * 43758.5453) * 2.0 - 1.0,
        fract(sin(dot(seedVec, vec3(67.123, 12.789, 98.456))) * 43758.5453) * 2.0 - 1.0
    );
}